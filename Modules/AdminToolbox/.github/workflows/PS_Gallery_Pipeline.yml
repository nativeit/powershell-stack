# This workflow publishes new modules to PSGallery on pull requests that close on the master branch.

name: PSGallery Publish

# Controls when the action will run.
on: # Triggers the workflow on push or pull request events but only for the master branch
  #push:
  #branches: [ master ]
  pull_request:
    branches:
      - master
    types:
      - closed

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-2019

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      #Cache Modules that are required by publishing modules
      - name: Specify PowerShell modules to cache
        id: psmodulecache
        uses: potatoqualitee/psmodulecache@v1
        with:
          modules-to-cache: ImportExcel, Posh-SSH, PSEventViewer, PSNmap, VMware.Vim, VMware.VimAutomation.Cis.Core, VMware.VimAutomation.Common, VMware.VimAutomation.Core, VMware.VimAutomation.Sdk

      - name: Setup PowerShell module cache
        id: cacher
        uses: actions/cache@v2
        with:
          path: ${{ steps.psmodulecache.outputs.modulepath }}
          key: ${{ steps.psmodulecache.outputs.keygen }}

      #Run pwsh functions to publish the module
      - name: Install Required Modules, Update Manifests, Publish updated Modules, and commit manifest changes
        env:
          NUGET_KEY: ${{ secrets.PS_GALLERY_KEY }}
          GIT_EMAIL: ${{ secrets.GIT_EMAIL }}
        shell: pwsh
        run: |
          #Install Modules

          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module ${{ steps.psmodulecache.outputs.needed }} -ErrorAction Stop
          #Install-Module PSEventViewer -Force -Allowclobber
          #Install-Module Posh-SSH -Force -Allowclobber -AllowPrerelease
          #Install-Module -Name VMware.VimAutomation.Core -Force

          #Import and Run Scripts
          $workingdirectory = (Get-Location).path
          . "$workingdirectory\.github\workflows\scripts\New-Manifest.ps1"
          . "$workingdirectory\.github\workflows\scripts\Invoke-PublishModules.ps1"
          Invoke-PublishModules

          #Publish new manifest files to the repository
          git config --global user.email $env:GIT_EMAIL
          git config --global user.name "TheTaylorLee"
          git add -A
          git commit -m "Manifest Update"
          git push -u origin master
